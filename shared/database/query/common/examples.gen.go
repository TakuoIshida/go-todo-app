// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package common

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-todo-app/shared/database/model/common"
)

func newExample(db *gorm.DB, opts ...gen.DOOption) example {
	_example := example{}

	_example.exampleDo.UseDB(db, opts...)
	_example.exampleDo.UseModel(&common.Example{})

	tableName := _example.exampleDo.TableName()
	_example.ALL = field.NewAsterisk(tableName)
	_example.CreatedAt = field.NewTime(tableName, "created_at")
	_example.UpdatedAt = field.NewTime(tableName, "updated_at")
	_example.CreateUserID = field.NewString(tableName, "create_user_id")
	_example.UpdateUserID = field.NewString(tableName, "update_user_id")
	_example.TenantID = field.NewString(tableName, "tenant_id")
	_example.ID = field.NewString(tableName, "id")
	_example.Name = field.NewString(tableName, "name")
	_example.Email = field.NewString(tableName, "email")
	_example.IsDeleted = field.NewBool(tableName, "is_deleted")

	_example.fillFieldMap()

	return _example
}

type example struct {
	exampleDo

	ALL          field.Asterisk
	CreatedAt    field.Time
	UpdatedAt    field.Time
	CreateUserID field.String
	UpdateUserID field.String
	TenantID     field.String
	ID           field.String
	Name         field.String
	Email        field.String
	IsDeleted    field.Bool

	fieldMap map[string]field.Expr
}

func (e example) Table(newTableName string) *example {
	e.exampleDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e example) As(alias string) *example {
	e.exampleDo.DO = *(e.exampleDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *example) updateTableName(table string) *example {
	e.ALL = field.NewAsterisk(table)
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.CreateUserID = field.NewString(table, "create_user_id")
	e.UpdateUserID = field.NewString(table, "update_user_id")
	e.TenantID = field.NewString(table, "tenant_id")
	e.ID = field.NewString(table, "id")
	e.Name = field.NewString(table, "name")
	e.Email = field.NewString(table, "email")
	e.IsDeleted = field.NewBool(table, "is_deleted")

	e.fillFieldMap()

	return e
}

func (e *example) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *example) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 9)
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["create_user_id"] = e.CreateUserID
	e.fieldMap["update_user_id"] = e.UpdateUserID
	e.fieldMap["tenant_id"] = e.TenantID
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["email"] = e.Email
	e.fieldMap["is_deleted"] = e.IsDeleted
}

func (e example) clone(db *gorm.DB) example {
	e.exampleDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e example) replaceDB(db *gorm.DB) example {
	e.exampleDo.ReplaceDB(db)
	return e
}

type exampleDo struct{ gen.DO }

type IExampleDo interface {
	gen.SubQuery
	Debug() IExampleDo
	WithContext(ctx context.Context) IExampleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExampleDo
	WriteDB() IExampleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExampleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExampleDo
	Not(conds ...gen.Condition) IExampleDo
	Or(conds ...gen.Condition) IExampleDo
	Select(conds ...field.Expr) IExampleDo
	Where(conds ...gen.Condition) IExampleDo
	Order(conds ...field.Expr) IExampleDo
	Distinct(cols ...field.Expr) IExampleDo
	Omit(cols ...field.Expr) IExampleDo
	Join(table schema.Tabler, on ...field.Expr) IExampleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExampleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExampleDo
	Group(cols ...field.Expr) IExampleDo
	Having(conds ...gen.Condition) IExampleDo
	Limit(limit int) IExampleDo
	Offset(offset int) IExampleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExampleDo
	Unscoped() IExampleDo
	Create(values ...*common.Example) error
	CreateInBatches(values []*common.Example, batchSize int) error
	Save(values ...*common.Example) error
	First() (*common.Example, error)
	Take() (*common.Example, error)
	Last() (*common.Example, error)
	Find() ([]*common.Example, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*common.Example, err error)
	FindInBatches(result *[]*common.Example, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*common.Example) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExampleDo
	Assign(attrs ...field.AssignExpr) IExampleDo
	Joins(fields ...field.RelationField) IExampleDo
	Preload(fields ...field.RelationField) IExampleDo
	FirstOrInit() (*common.Example, error)
	FirstOrCreate() (*common.Example, error)
	FindByPage(offset int, limit int) (result []*common.Example, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExampleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e exampleDo) Debug() IExampleDo {
	return e.withDO(e.DO.Debug())
}

func (e exampleDo) WithContext(ctx context.Context) IExampleDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exampleDo) ReadDB() IExampleDo {
	return e.Clauses(dbresolver.Read)
}

func (e exampleDo) WriteDB() IExampleDo {
	return e.Clauses(dbresolver.Write)
}

func (e exampleDo) Session(config *gorm.Session) IExampleDo {
	return e.withDO(e.DO.Session(config))
}

func (e exampleDo) Clauses(conds ...clause.Expression) IExampleDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exampleDo) Returning(value interface{}, columns ...string) IExampleDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exampleDo) Not(conds ...gen.Condition) IExampleDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exampleDo) Or(conds ...gen.Condition) IExampleDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exampleDo) Select(conds ...field.Expr) IExampleDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exampleDo) Where(conds ...gen.Condition) IExampleDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exampleDo) Order(conds ...field.Expr) IExampleDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exampleDo) Distinct(cols ...field.Expr) IExampleDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exampleDo) Omit(cols ...field.Expr) IExampleDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exampleDo) Join(table schema.Tabler, on ...field.Expr) IExampleDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exampleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExampleDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exampleDo) RightJoin(table schema.Tabler, on ...field.Expr) IExampleDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exampleDo) Group(cols ...field.Expr) IExampleDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exampleDo) Having(conds ...gen.Condition) IExampleDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exampleDo) Limit(limit int) IExampleDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exampleDo) Offset(offset int) IExampleDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exampleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExampleDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exampleDo) Unscoped() IExampleDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exampleDo) Create(values ...*common.Example) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exampleDo) CreateInBatches(values []*common.Example, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exampleDo) Save(values ...*common.Example) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exampleDo) First() (*common.Example, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*common.Example), nil
	}
}

func (e exampleDo) Take() (*common.Example, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*common.Example), nil
	}
}

func (e exampleDo) Last() (*common.Example, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*common.Example), nil
	}
}

func (e exampleDo) Find() ([]*common.Example, error) {
	result, err := e.DO.Find()
	return result.([]*common.Example), err
}

func (e exampleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*common.Example, err error) {
	buf := make([]*common.Example, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exampleDo) FindInBatches(result *[]*common.Example, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exampleDo) Attrs(attrs ...field.AssignExpr) IExampleDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exampleDo) Assign(attrs ...field.AssignExpr) IExampleDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exampleDo) Joins(fields ...field.RelationField) IExampleDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exampleDo) Preload(fields ...field.RelationField) IExampleDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exampleDo) FirstOrInit() (*common.Example, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*common.Example), nil
	}
}

func (e exampleDo) FirstOrCreate() (*common.Example, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*common.Example), nil
	}
}

func (e exampleDo) FindByPage(offset int, limit int) (result []*common.Example, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exampleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exampleDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exampleDo) Delete(models ...*common.Example) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exampleDo) withDO(do gen.Dao) *exampleDo {
	e.DO = *do.(*gen.DO)
	return e
}
