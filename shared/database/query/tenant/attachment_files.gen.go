// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package tenant

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-todo-app/shared/database/model/tenant"
)

func newAttachmentFile(db *gorm.DB, opts ...gen.DOOption) attachmentFile {
	_attachmentFile := attachmentFile{}

	_attachmentFile.attachmentFileDo.UseDB(db, opts...)
	_attachmentFile.attachmentFileDo.UseModel(&tenant.AttachmentFile{})

	tableName := _attachmentFile.attachmentFileDo.TableName()
	_attachmentFile.ALL = field.NewAsterisk(tableName)
	_attachmentFile.CreatedAt = field.NewTime(tableName, "created_at")
	_attachmentFile.UpdatedAt = field.NewTime(tableName, "updated_at")
	_attachmentFile.CreateUserID = field.NewString(tableName, "create_user_id")
	_attachmentFile.UpdateUserID = field.NewString(tableName, "update_user_id")
	_attachmentFile.TenantID = field.NewString(tableName, "tenant_id")
	_attachmentFile.ID = field.NewString(tableName, "id")
	_attachmentFile.Name = field.NewString(tableName, "name")
	_attachmentFile.Size = field.NewInt64(tableName, "size")
	_attachmentFile.ContentType = field.NewString(tableName, "content_type")
	_attachmentFile.IsDeleted = field.NewBool(tableName, "is_deleted")
	_attachmentFile.TodoID = field.NewString(tableName, "todo_id")

	_attachmentFile.fillFieldMap()

	return _attachmentFile
}

type attachmentFile struct {
	attachmentFileDo

	ALL          field.Asterisk
	CreatedAt    field.Time
	UpdatedAt    field.Time
	CreateUserID field.String
	UpdateUserID field.String
	TenantID     field.String
	ID           field.String
	Name         field.String
	Size         field.Int64
	ContentType  field.String
	IsDeleted    field.Bool
	TodoID       field.String

	fieldMap map[string]field.Expr
}

func (a attachmentFile) Table(newTableName string) *attachmentFile {
	a.attachmentFileDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a attachmentFile) As(alias string) *attachmentFile {
	a.attachmentFileDo.DO = *(a.attachmentFileDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *attachmentFile) updateTableName(table string) *attachmentFile {
	a.ALL = field.NewAsterisk(table)
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.CreateUserID = field.NewString(table, "create_user_id")
	a.UpdateUserID = field.NewString(table, "update_user_id")
	a.TenantID = field.NewString(table, "tenant_id")
	a.ID = field.NewString(table, "id")
	a.Name = field.NewString(table, "name")
	a.Size = field.NewInt64(table, "size")
	a.ContentType = field.NewString(table, "content_type")
	a.IsDeleted = field.NewBool(table, "is_deleted")
	a.TodoID = field.NewString(table, "todo_id")

	a.fillFieldMap()

	return a
}

func (a *attachmentFile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *attachmentFile) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["create_user_id"] = a.CreateUserID
	a.fieldMap["update_user_id"] = a.UpdateUserID
	a.fieldMap["tenant_id"] = a.TenantID
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["size"] = a.Size
	a.fieldMap["content_type"] = a.ContentType
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["todo_id"] = a.TodoID
}

func (a attachmentFile) clone(db *gorm.DB) attachmentFile {
	a.attachmentFileDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a attachmentFile) replaceDB(db *gorm.DB) attachmentFile {
	a.attachmentFileDo.ReplaceDB(db)
	return a
}

type attachmentFileDo struct{ gen.DO }

type IAttachmentFileDo interface {
	gen.SubQuery
	Debug() IAttachmentFileDo
	WithContext(ctx context.Context) IAttachmentFileDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAttachmentFileDo
	WriteDB() IAttachmentFileDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAttachmentFileDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAttachmentFileDo
	Not(conds ...gen.Condition) IAttachmentFileDo
	Or(conds ...gen.Condition) IAttachmentFileDo
	Select(conds ...field.Expr) IAttachmentFileDo
	Where(conds ...gen.Condition) IAttachmentFileDo
	Order(conds ...field.Expr) IAttachmentFileDo
	Distinct(cols ...field.Expr) IAttachmentFileDo
	Omit(cols ...field.Expr) IAttachmentFileDo
	Join(table schema.Tabler, on ...field.Expr) IAttachmentFileDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAttachmentFileDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAttachmentFileDo
	Group(cols ...field.Expr) IAttachmentFileDo
	Having(conds ...gen.Condition) IAttachmentFileDo
	Limit(limit int) IAttachmentFileDo
	Offset(offset int) IAttachmentFileDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAttachmentFileDo
	Unscoped() IAttachmentFileDo
	Create(values ...*tenant.AttachmentFile) error
	CreateInBatches(values []*tenant.AttachmentFile, batchSize int) error
	Save(values ...*tenant.AttachmentFile) error
	First() (*tenant.AttachmentFile, error)
	Take() (*tenant.AttachmentFile, error)
	Last() (*tenant.AttachmentFile, error)
	Find() ([]*tenant.AttachmentFile, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*tenant.AttachmentFile, err error)
	FindInBatches(result *[]*tenant.AttachmentFile, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*tenant.AttachmentFile) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAttachmentFileDo
	Assign(attrs ...field.AssignExpr) IAttachmentFileDo
	Joins(fields ...field.RelationField) IAttachmentFileDo
	Preload(fields ...field.RelationField) IAttachmentFileDo
	FirstOrInit() (*tenant.AttachmentFile, error)
	FirstOrCreate() (*tenant.AttachmentFile, error)
	FindByPage(offset int, limit int) (result []*tenant.AttachmentFile, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAttachmentFileDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a attachmentFileDo) Debug() IAttachmentFileDo {
	return a.withDO(a.DO.Debug())
}

func (a attachmentFileDo) WithContext(ctx context.Context) IAttachmentFileDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a attachmentFileDo) ReadDB() IAttachmentFileDo {
	return a.Clauses(dbresolver.Read)
}

func (a attachmentFileDo) WriteDB() IAttachmentFileDo {
	return a.Clauses(dbresolver.Write)
}

func (a attachmentFileDo) Session(config *gorm.Session) IAttachmentFileDo {
	return a.withDO(a.DO.Session(config))
}

func (a attachmentFileDo) Clauses(conds ...clause.Expression) IAttachmentFileDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a attachmentFileDo) Returning(value interface{}, columns ...string) IAttachmentFileDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a attachmentFileDo) Not(conds ...gen.Condition) IAttachmentFileDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a attachmentFileDo) Or(conds ...gen.Condition) IAttachmentFileDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a attachmentFileDo) Select(conds ...field.Expr) IAttachmentFileDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a attachmentFileDo) Where(conds ...gen.Condition) IAttachmentFileDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a attachmentFileDo) Order(conds ...field.Expr) IAttachmentFileDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a attachmentFileDo) Distinct(cols ...field.Expr) IAttachmentFileDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a attachmentFileDo) Omit(cols ...field.Expr) IAttachmentFileDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a attachmentFileDo) Join(table schema.Tabler, on ...field.Expr) IAttachmentFileDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a attachmentFileDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAttachmentFileDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a attachmentFileDo) RightJoin(table schema.Tabler, on ...field.Expr) IAttachmentFileDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a attachmentFileDo) Group(cols ...field.Expr) IAttachmentFileDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a attachmentFileDo) Having(conds ...gen.Condition) IAttachmentFileDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a attachmentFileDo) Limit(limit int) IAttachmentFileDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a attachmentFileDo) Offset(offset int) IAttachmentFileDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a attachmentFileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAttachmentFileDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a attachmentFileDo) Unscoped() IAttachmentFileDo {
	return a.withDO(a.DO.Unscoped())
}

func (a attachmentFileDo) Create(values ...*tenant.AttachmentFile) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a attachmentFileDo) CreateInBatches(values []*tenant.AttachmentFile, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a attachmentFileDo) Save(values ...*tenant.AttachmentFile) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a attachmentFileDo) First() (*tenant.AttachmentFile, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*tenant.AttachmentFile), nil
	}
}

func (a attachmentFileDo) Take() (*tenant.AttachmentFile, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*tenant.AttachmentFile), nil
	}
}

func (a attachmentFileDo) Last() (*tenant.AttachmentFile, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*tenant.AttachmentFile), nil
	}
}

func (a attachmentFileDo) Find() ([]*tenant.AttachmentFile, error) {
	result, err := a.DO.Find()
	return result.([]*tenant.AttachmentFile), err
}

func (a attachmentFileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*tenant.AttachmentFile, err error) {
	buf := make([]*tenant.AttachmentFile, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a attachmentFileDo) FindInBatches(result *[]*tenant.AttachmentFile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a attachmentFileDo) Attrs(attrs ...field.AssignExpr) IAttachmentFileDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a attachmentFileDo) Assign(attrs ...field.AssignExpr) IAttachmentFileDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a attachmentFileDo) Joins(fields ...field.RelationField) IAttachmentFileDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a attachmentFileDo) Preload(fields ...field.RelationField) IAttachmentFileDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a attachmentFileDo) FirstOrInit() (*tenant.AttachmentFile, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*tenant.AttachmentFile), nil
	}
}

func (a attachmentFileDo) FirstOrCreate() (*tenant.AttachmentFile, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*tenant.AttachmentFile), nil
	}
}

func (a attachmentFileDo) FindByPage(offset int, limit int) (result []*tenant.AttachmentFile, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a attachmentFileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a attachmentFileDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a attachmentFileDo) Delete(models ...*tenant.AttachmentFile) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *attachmentFileDo) withDO(do gen.Dao) *attachmentFileDo {
	a.DO = *do.(*gen.DO)
	return a
}
